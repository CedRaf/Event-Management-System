generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model calendar {
  calendarID     Int    @id @default(autoincrement())
  userID         Int
  eventID        Int
  linked_account String @db.VarChar(255)
  event          event  @relation(fields: [eventID], references: [eventID], map: "Calendar_eventID_fkey")
  user           user   @relation(fields: [userID], references: [userID], map: "Calendar_userID_fkey")

  @@index([eventID], map: "Calendar_eventID_fkey")
  @@index([userID], map: "Calendar_userID_fkey")
}

model event {
  eventID           Int             @id @default(autoincrement())
  userID            Int
  categoryID        Int
  event_title       String          @db.VarChar(255)
  event_description String          @db.VarChar(255)
  event_date        DateTime        @default(now())
  created_at        DateTime        @default(now())
  calendar          calendar[]
  eventcategory     eventcategory   @relation(fields: [categoryID], references: [categoryID], map: "Event_categoryID_fkey")
  user              user            @relation(fields: [userID], references: [userID], map: "Event_userID_fkey")
  notifications     notifications[]
  rsvp              rsvp[]
  

  @@index([categoryID], map: "Event_categoryID_fkey")
  @@index([userID], map: "Event_userID_fkey")
}

model eventcategory {
  categoryID           Int     @id @default(autoincrement())
  userID               Int
  category_name        String  @db.VarChar(255)
  category_description String  @db.VarChar(255)
  event                event[]
  user                 user    @relation(fields: [userID], references: [userID], name: "UserEventCategories") 

  @@index([userID], map: "Event_userID_fkey")
}

model notifications {
  notificationID Int      @id @default(autoincrement())
  opened         Boolean  @default(false)
  userID         Int
  eventID        Int?
  rsvpID         Int?
  message        String   @db.VarChar(255)
  time_sent      DateTime @default(now())
  user           user     @relation(fields: [userID], references: [userID], map: "Notifications_userID_fkey")
  event          event?    @relation(fields: [eventID], references: [eventID], map: "Notifications_eventID_fkey", onDelete: Cascade)
  rsvp           rsvp?     @relation(fields: [rsvpID], references: [rsvpID], map: "Notifications_rsvpID_fkey", onDelete: Cascade)

  @@index([eventID], map: "Notifications_eventID_fkey")
  @@index([userID], map: "Notifications_userID_fkey")
  @@index([rsvpID], map: "Notifications_rsvpID_fkey")
}

model rsvp {
  rsvpID       Int         @id @default(autoincrement())
  senderUserID Int
  eventID      Int
  status       rsvp_status @default(ACTIVE)
  created_at   DateTime    @default(now())
  last_edited  DateTime    @default(now())

  event        event       @relation(fields: [eventID], references: [eventID], map: "RSVP_eventID_fkey")
  sender       user        @relation("RSVP_Sender", fields: [senderUserID], references: [userID], map: "RSVP_senderUserID_fkey")
  recipients   recipient[] 
  notifications notifications[]

  @@index([eventID], map: "RSVP_eventID_fkey")
  @@index([senderUserID], map: "RSVP_senderUserID_fkey")
}

model recipient {
  id          Int            @id @default(autoincrement())
  rsvpID      Int
  userID      Int
  response    rsvp_response  @default(PENDING)
  cancelled    Boolean        @default(false)
  cancelled_at DateTime?       

  rsvp       rsvp   @relation(fields: [rsvpID], references: [rsvpID], map: "Recipient_RSVP_fkey", onDelete: Cascade)
  user       user   @relation(fields: [userID], references: [userID], map: "Recipient_User_fkey")
  

  @@index([rsvpID], map: "Recipient_RSVP_fkey")
  @@index([userID], map: "Recipient_User_fkey")
}

model user {
  userID        Int             @id @default(autoincrement())
  username      String          @db.VarChar(255)
  first_name    String          @db.VarChar(255)
  last_name     String          @db.VarChar(255)
  email_address String          @db.VarChar(255)                  @unique
  password      String          @db.VarChar(255)
  calendar      calendar[]
  event         event[]
  notifications notifications[]
  eventcategory eventcategory[] @relation("UserEventCategories")

  sentRSVPs     rsvp[]          @relation("RSVP_Sender")
  receivedRSVPs recipient[]     
}

enum rsvp_status {
  ACTIVE
  CANCELLED
  COMPLETED
}

enum rsvp_response{
  ACCEPTED
  PENDING
  DECLINED
}

